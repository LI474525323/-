项目描述： 
实现了商品查询及优惠卷秒杀，达人探店，好友之间点赞，关注等功能，业务可以帮助商家引流，增加曝光 度，也可以为用户提供查看提供校园附近消费场所 
项目内容： 
查询高频访问店铺采用Redis缓存，降低数据库压力同时网页的响应速度提高70%。使用Redis+Lua脚本实现优惠卷库存的预检，并使用RabbMQ消息队列实现异步下单，解决了库存超卖 
问题和一人一单问题。相比于传统的DB，秒杀性能提高40%。 
使用Redis List的数据结构存储用户的点赞信息，同时使用sortedSet完成对TopN点赞的排序，形成点赞 
排行榜。完成用户关注功能，使用Redis Set实现博主与用户之间的共同关注，同时在系统用户量较小的 
前提下，采用Feed流推模式向关注者推送消息，保证新消息的及时传达 
使用Redis的Geo+Hash数据结构分类存储附近商户，同时使用BitMap实现用户连续签到统计功能。
根据id查询商铺：如果缓存有，则直接返回，如果缓存不存在，则查询数据库，然后存入redis
出现的问题：
1. 根据id修改店铺商铺时出现缓存数据库不一致问题
根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间
 根据id修改店铺时，先修改数据库，再删除缓存
2. 缓存穿透问题：
用户查询的店铺请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力。
缓存空对象思路分析。如果这个数据不存在，还是会把这个数据写入到Redis中，并且将value设置为空，欧当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。
3. 缓存击穿问题：
利用互斥锁解决缓存击穿问题：
相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，redis的setnx方法来表示获取锁，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿
利用逻辑过期解决缓存击穿问题
当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。
这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。

优惠卷秒杀
1.  分布式锁原子性问题：Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性
2. 分布式锁：（再看看）
● 满足分布式系统或集群模式下多进程可见并且互斥的锁。
● 分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路
通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。由于现在我们部署了多个tomcat，每个tomcat都有一个属于自己的jvm，那么假设在服务器A的tomcat内部，有两个线程，这两个线程由于使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的，但是如果现在是服务器B的tomcat内部，又有两个线程，但是他们的锁对象写的虽然和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2实现互斥，这就是 集群环境下，syn锁失效的原因，在这种情况下，我们就需要使用分布式锁来解决这个问题。
3. 优化思路
下下单流程
当用户发起请求，此时会请求nginx，nginx会访问到tomcat，而tomcat中的程序，会进行串行操作，分成如下几个步骤
1、查询优惠卷
2、判断秒杀库存是否足够
3、查询订单
4、校验是否是一人一单
5、扣减库存
6、创建订单
为什么要异步下单。在这六步操作中，又有很多操作是要去操作数据库的，而且还是一个线程串行执行， 这样就会导致我们的程序执行的很慢，所以我们需要异步程序执行。利用消息队列完成异步下单，使用队列的好处在于 解耦，这种场景在我们秒杀中就变成了：我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度
好友关注
1. 推送到粉丝收件箱，查询收件箱数据时，可以实现分页查询
问题：Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。假设在t1 时刻，我们去读取第一页，此时page = 1 ，size = 5 ，那么我们拿到的就是10~6 这几条记录，假设现在t2时候又发布了一条记录，此时t3 时刻，我们来读取第二页，读取第二页传入的参数是page=2 ，size=5 ，那么此时读取到的第二页实际上是从6 开始，然后是6~2 ，那么我们就读取到了重复的数据，所以feed流的分页，不能采用原始方案来做。
解决方案：
Feed流的滚动分页
我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据
举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用sortedSet来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了


我的项目介绍：
基于Wi-Fi的通信技术和多种智能设备，以矿工工作服，安全帽为载体，结合大数据分析和高级图像处理技术，实现矿工实时定位、考勤、生理指标和安全环境监测，增强矿井预警功能，辅助灾后人员救援，降低矿山安全事故发生的概率，给矿工提供更加安全放心的作业体验。与传统的监测系统单一定位功能相比，进一步减少了人因事故发生，提高了井下人员作业的安全性，提高了劳动生产效率和矿难后井下营救成功率。
项目内容： 
基于Wi-Fi通信结合Dimine技术实现对作业人员的定位和考勤，使用三角定位算法绝对误差小于1m 
1、STM32一直处于寻卡状态，当RC522感应区出现IC卡时，读卡成功后蜂鸣器将会滴一声，STM32将会把卡号发送给ESP8266，ESP8266随即将卡号发送给PC实时监测平台，平台会将卡号与数据库信息进行比对，并将比对结果信息显示在监测平台对应位置。定位使用ESP8266来实现
2.ESP8266原理：ESP8266芯片可以作为一个独立的系统运行，运行在客户端模式下；也可以作为一个虚拟AP与其他设备互相通信。芯片通过UART或SPI接口发送AT指令来连接WiFi并实现与远程服务器的通讯，同时支持透传模式，可以将芯片当作一个串口转换模块来使用。
3.三角定位：通过系统SDK获取到周围各个AP（Access Point）发送的信号强度RSSI及AP地址，利用RSSI来定位。如果我们已经知道了这些AP的位置，我们可以利用信号衰减模型估算出移动设备距离各个AP的距离，然后根据智能机到周围AP距离画圆，其交点就是该设备的位置。
多种传感器对作业人员生理指标和环境状况的采集，制定相应协议多线程传送给服务端。 
数据的实时监控、利用MySQL进行存储和分析并作出安全预警，利用QT进行客服端界面的开发
项目遇到的问题及难点
1. 技术上遇到的困难：
因为采集的生理指标和环境的一些数据需要写入到数据库中，也就是说需要对矿工的数据进行更新，测试的时候发现服务器瘫痪了，但是程序并没有异常的报错，比较棘手的问题。后来就是查阅相关的资料，对程序进行debug，逐句检查时什么造成的，后来发现是因为mysql的update语句没有加上索引，会对全表扫描，于是就会对所有的记录加上next-key锁，相当于把整个表锁了，正常来说是对更新行加行级锁，而不是表锁，所有造成业务的瘫痪。
2. 材料选取遇到的难点：
因为我们的采集的传感器主要集成在安全帽及背心之中，然后对材料的选取也很关键，当初的时候我们简单的使用市场上一些衣服的材料，但我们做完初代产品的时候，我们去湖南有色金属黄沙坪矿业公司的一个矿场测试，发现并不可行，因为矿工工作的时候环境比较闷热，也会流大量的汗水，如果使用普通的材料定制的衣服，一些传感器可能会出现失灵的现象，甚至有相关的安全风险，所以通过询问和查找论文相关资料，最终选取了类似救生衣材料的聚四氟乙烯。
项目分工：
项目成员主要由：工科＋管理学科+经济学科+医学等多学科人员组成
本人：该项目整个统筹工作和软件功能开发，负责本项目的产品研发和后期维护，充分利用团队资源，推进团队目标，及时发现和解决问题，确保项目能够按时完成
管理学科的成员：负责项目资金管理包括融资计划，资金来源渠道及用途，财务预测等等
医学学科成员：负责提供医学类知识的专业指导，比如生理指标数据测量标准及其及其原理等
经济学科的成员：负责市场分析，产品宣传推广，营销策略的制定及及后续商业合作谈判。
团队协作：
意见不一：
1. 确保沟通及时且有效，保持冷静和理性，一旦出现分歧，应及时进行沟通，以防止分歧加剧。
2、尝试站在对方思考的角度思考问题，判断对方观点和己方观点哪一方更加有理； 3、双方共同点进行放大，差异点进行折中或者缩小，尽量达成一致；
